#!/usr/bin/env python3
"""
Script para configurar una base de datos completa con todos los datos por defecto
necesarios para el funcionamiento del sistema de restaurante.

Este script inicializa:
- Tablas de la base de datos
- Datos por defecto (categor√≠as, al√©rgenos, etc.)
- Datos de configuraci√≥n inicial

Uso:
    python scripts-examples/setup_complete_database.py
"""
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    from src.core.config import settings
    from src.database import Base, init_db
    from src.auth.service import AuthService
except ImportError as e:
    print(f"‚ùå Error de importaci√≥n: {e}")
    print("üí° Aseg√∫rate de:")
    print("   1. Estar en el directorio ra√≠z del proyecto")
    print("   2. Tener instaladas las dependencias: pip install -r requirements.txt")
    print("   3. Tener configurada la base de datos en src/core/config.py")
    sys.exit(1)

def setup_database():
    """Configura la base de datos completa"""
    print("üöÄ Iniciando configuraci√≥n completa de la base de datos...")
    
    try:
        engine = create_engine(settings.sync_dsn, echo=False)
        SessionLocal = sessionmaker(bind=engine)
        
        # Crear todas las tablas
        print("üìã Creando estructura de tablas...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tablas creadas")
        
        # Cargar datos por defecto expandidos
        load_extended_default_data(engine)
        
        print("üéâ ¬°Base de datos configurada exitosamente!")
        print("üí° Ahora puedes ejecutar:")
        print("   - python scripts-examples/load_sample_data.py (para datos de ejemplo)")
        print("   - uvicorn src.main:app --reload (para iniciar el servidor)")
        
    except Exception as e:
        print(f"‚ùå Error durante la configuraci√≥n: {e}")
        raise

def load_extended_default_data(engine):
    """Carga datos por defecto expandidos"""
    with engine.connect() as conn:
        # Configurar modo SQL para permitir ID 0
        conn.execute(text("SET SESSION sql_mode = 'NO_AUTO_VALUE_ON_ZERO'"))
        
        # Verificar si ya existen datos (para evitar duplicados)
        result = conn.execute(text("SELECT COUNT(*) FROM categoria_platos"))
        if result.scalar() > 0:
            print("‚ÑπÔ∏è  Los datos por defecto ya est√°n cargados")
            return
        
        print("üå± Cargando datos por defecto expandidos...")
        
        # === USUARIO ADMINISTRADOR ===
        print("üë§ Creando usuario administrador...")
        hashed_password = AuthService.get_password_hash("admin123")
        conn.execute(text("""
            INSERT IGNORE INTO users (username, email, hashed_password, is_active, is_admin) VALUES
            ('admin', 'admin@restaurant.com', :password, true, true)
        """), {"password": hashed_password})
        
        # === CATEGOR√çAS DE PLATOS EXPANDIDAS ===
        print("üìÇ Cargando categor√≠as de platos...")
        conn.execute(text("""
            INSERT IGNORE INTO categoria_platos (id, nombre) VALUES
            (0, 'Sin categor√≠a'),
            (1, 'Entrantes'),
            (2, 'Principales'), 
            (3, 'Postres'),
            (4, 'Ensaladas'),
            (5, 'Tapas'),
            (6, 'Arroces'),
            (7, 'Carnes'),
            (8, 'Pescados'),
            (9, 'Mariscos'),
            (10, 'Sopas'),
            (11, 'Verduras'),
            (12, 'Pasta'),
            (13, 'Quesos'),
            (14, 'Aperitivos')
        """))
        
        # === AL√âRGENOS SEG√öN LEY ESPA√ëOLA ===
        print("üö® Cargando al√©rgenos oficiales...")
        conn.execute(text("""
            INSERT IGNORE INTO alergenos (id, nombre) VALUES
            (0, 'Sin al√©rgenos'),
            (1, 'Gluten'),
            (2, 'Crust√°ceos'),
            (3, 'Huevos'),
            (4, 'Pescado'),
            (5, 'Cacahuetes'),
            (6, 'Soja'),
            (7, 'L√°cteos'),
            (8, 'Frutos secos'),
            (9, 'Apio'),
            (10, 'Mostaza'),
            (11, 'S√©samo'),
            (12, 'Sulfitos'),
            (13, 'Altramuces'),
            (14, 'Moluscos')
        """))
        
        # === CATEGOR√çAS DE VINOS EXPANDIDAS ===
        print("üç∑ Cargando categor√≠as de vinos...")
        conn.execute(text("""
            INSERT IGNORE INTO categoria_vinos (id, nombre) VALUES
            (0, 'Sin categor√≠a'),
            (1, 'Tinto joven'),
            (2, 'Tinto crianza'),
            (3, 'Tinto reserva'),
            (4, 'Tinto gran reserva'),
            (5, 'Blanco joven'),
            (6, 'Blanco crianza'),
            (7, 'Blanco reserva'),
            (8, 'Rosado'),
            (9, 'Espumoso'),
            (10, 'Dulce'),
            (11, 'Generoso'),
            (12, 'Licoroso'),
            (13, 'Fortificado')
        """))
        
        # === DENOMINACIONES DE ORIGEN ESPA√ëOLAS ===
        print("üè∑Ô∏è Cargando denominaciones de origen...")
        conn.execute(text("""
            INSERT IGNORE INTO denominaciones_origen (id, nombre, region) VALUES
            (0, 'Sin D.O.', 'Sin especificar'),
            
            -- Castilla y Le√≥n
            (1, 'D.O. Ribera del Duero', 'Castilla y Le√≥n'),
            (2, 'D.O. Rueda', 'Castilla y Le√≥n'),
            (3, 'D.O. Toro', 'Castilla y Le√≥n'),
            (4, 'D.O. Cigales', 'Castilla y Le√≥n'),
            (5, 'D.O. Bierzo', 'Castilla y Le√≥n'),
            
            -- La Rioja
            (6, 'D.O. Rioja', 'La Rioja'),
            
            -- Catalu√±a
            (7, 'D.O. Pened√®s', 'Catalu√±a'),
            (8, 'D.O. Priorat', 'Catalu√±a'),
            (9, 'D.O. Montsant', 'Catalu√±a'),
            (10, 'D.O. Cava', 'Catalu√±a'),
            
            -- Galicia
            (11, 'D.O. R√≠as Baixas', 'Galicia'),
            (12, 'D.O. Ribeiro', 'Galicia'),
            (13, 'D.O. Valdeorras', 'Galicia'),
            
            -- Andaluc√≠a
            (14, 'D.O. Jerez', 'Andaluc√≠a'),
            (15, 'D.O. Montilla-Moriles', 'Andaluc√≠a'),
            (16, 'D.O. M√°laga', 'Andaluc√≠a'),
            
            -- Valencia
            (17, 'D.O. Valencia', 'Valencia'),
            (18, 'D.O. Utiel-Requena', 'Valencia'),
            (19, 'D.O. Alicante', 'Valencia'),
            
            -- Arag√≥n
            (20, 'D.O. Somontano', 'Arag√≥n'),
            (21, 'D.O. Campo de Borja', 'Arag√≥n'),
            (22, 'D.O. Cari√±ena', 'Arag√≥n'),
            
            -- Navarra
            (23, 'D.O. Navarra', 'Navarra'),
            
            -- Pa√≠s Vasco
            (24, 'D.O. Txakoli de Getaria', 'Pa√≠s Vasco'),
            
            -- Murcia
            (25, 'D.O. Jumilla', 'Murcia'),
            (26, 'D.O. Yecla', 'Murcia'),
            
            -- Castilla-La Mancha
            (27, 'D.O. Valdepe√±as', 'Castilla-La Mancha'),
            (28, 'D.O. La Mancha', 'Castilla-La Mancha'),
            
            -- Extremadura
            (29, 'D.O. Ribera del Guadiana', 'Extremadura'),
            
            -- Canarias
            (30, 'D.O. Tacoronte-Acentejo', 'Canarias'),
            
            -- Otros
            (31, 'V.T. Castilla', 'Vino de la Tierra'),
            (32, 'V.T. Castilla y Le√≥n', 'Vino de la Tierra')
        """))
        
        # === VARIEDADES DE UVA ESPA√ëOLAS ===
        print("üçá Cargando variedades de uva...")
        conn.execute(text("""
            INSERT IGNORE INTO uvas (id, nombre, tipo) VALUES
            (0, 'Sin uva', 'Sin tipo'),
            
            -- Uvas tintas espa√±olas
            (1, 'Tempranillo', 'Tinta'),
            (2, 'Garnacha', 'Tinta'),
            (3, 'Monastrell', 'Tinta'),
            (4, 'Bobal', 'Tinta'),
            (5, 'Menc√≠a', 'Tinta'),
            (6, 'Graciano', 'Tinta'),
            (7, 'Mazuelo', 'Tinta'),
            (8, 'Cari√±ena', 'Tinta'),
            (9, 'Tinta de Toro', 'Tinta'),
            (10, 'Prieto Picudo', 'Tinta'),
            
            -- Uvas tintas internacionales
            (11, 'Cabernet Sauvignon', 'Tinta'),
            (12, 'Merlot', 'Tinta'),
            (13, 'Syrah', 'Tinta'),
            (14, 'Pinot Noir', 'Tinta'),
            (15, 'Cabernet Franc', 'Tinta'),
            
            -- Uvas blancas espa√±olas
            (16, 'Albari√±o', 'Blanca'),
            (17, 'Verdejo', 'Blanca'),
            (18, 'Godello', 'Blanca'),
            (19, 'Viura', 'Blanca'),
            (20, 'Palomino', 'Blanca'),
            (21, 'Pedro Xim√©nez', 'Blanca'),
            (22, 'Air√©n', 'Blanca'),
            (23, 'Macabeo', 'Blanca'),
            (24, 'Xarel¬∑lo', 'Blanca'),
            (25, 'Parellada', 'Blanca'),
            (26, 'Moscatel', 'Blanca'),
            (27, 'Malvas√≠a', 'Blanca'),
            (28, 'Treixadura', 'Blanca'),
            (29, 'Loureiro', 'Blanca'),
            (30, 'Cai√±o', 'Blanca'),
            
            -- Uvas blancas internacionales
            (31, 'Chardonnay', 'Blanca'),
            (32, 'Sauvignon Blanc', 'Blanca'),
            (33, 'Riesling', 'Blanca'),
            (34, 'Gew√ºrztraminer', 'Blanca'),
            (35, 'Pinot Grigio', 'Blanca')
        """))
        
        # === BODEGAS BASE PARA EMPEZAR ===
        print("üè≠ Cargando bodegas base...")
        conn.execute(text("""
            INSERT IGNORE INTO bodegas (id, nombre, region) VALUES
            (0, 'Sin bodega', 'Sin regi√≥n'),
            (1, 'Marqu√©s de Riscal', 'Rioja'),
            (2, 'Vega Sicilia', 'Ribera del Duero'),
            (3, 'Torres', 'Pened√®s'),
            (4, 'Mart√≠n C√≥dax', 'R√≠as Baixas'),
            (5, 'Gonz√°lez Byass', 'Jerez')
        """))
        
        # === EN√ìLOGOS BASE ===
        print("üë®‚Äçüî¨ Cargando en√≥logos base...")
        conn.execute(text("""
            INSERT IGNORE INTO enologos (id, nombre) VALUES
            (0, 'Sin en√≥logo'),
            (1, 'Francisco Hurtado de Am√©zaga'),
            (2, 'Miguel Torres Maczassek'),
            (3, 'Pablo √Ålvarez'),
            (4, 'Mariano Garc√≠a'),
            (5, 'Telmo Rodr√≠guez')
        """))
        
        conn.commit()
        
        print("‚úÖ Datos por defecto expandidos cargados correctamente")
        print("üìä Resumen de datos cargados:")
        print("   - 15 categor√≠as de platos")
        print("   - 15 al√©rgenos oficiales")
        print("   - 14 categor√≠as de vinos")
        print("   - 33 denominaciones de origen")
        print("   - 36 variedades de uva")
        print("   - 6 bodegas base")
        print("   - 6 en√≥logos base")
        print("")
        print("üë§ Usuario administrador creado:")
        print("   - Username: admin")
        print("   - Password: admin123")
        print("   - Email: admin@restaurant.com")

def main():
    """Funci√≥n principal"""
    print("üîß Configurador de Base de Datos del Restaurante")
    print("=" * 50)
    
    response = input("¬øContinuar con la configuraci√≥n de la base de datos? (y/N): ")
    if response.lower() != 'y':
        print("Operaci√≥n cancelada")
        return
    
    setup_database()
    
    print("")
    print("üéØ Pr√≥ximos pasos recomendados:")
    print("1. Ejecutar: python scripts-examples/load_sample_data.py")
    print("2. Iniciar servidor: uvicorn src.main:app --reload")
    print("3. Visitar documentaci√≥n: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
