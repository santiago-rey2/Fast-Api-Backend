#!/usr/bin/env python3
"""
Script para resetear completamente la base de datos y cargar datos por defecto.

Este script:
1. Elimina todas las tablas existentes
2. Recrea todas las tablas con campos de auditor√≠a
3. Carga los datos por defecto (categor√≠as, al√©rgenos, etc.)
4. Crea el usuario administrador por defecto

IMPORTANTE: Este script usa las entidades actualizadas con campos de auditor√≠a
(created_at, updated_at, is_active, deleted_at)

Uso:
    python scripts-examples/reset_database.py
"""

import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import create_engine, text, inspect
from src.core.config import settings
from src.database import Base, init_db, _load_default_data
from src.auth.service import AuthService

def force_drop_all_tables():
    """Fuerza la eliminaci√≥n de todas las tablas de la base de datos"""
    print("üí• Forzando eliminaci√≥n de TODAS las tablas...")
    
    engine = create_engine(settings.sync_dsn, echo=False)
    
    with engine.connect() as conn:
        try:
            # Deshabilitar foreign key checks
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
            
            # Obtener todas las tablas
            result = conn.execute(text("SHOW TABLES"))
            tables = [row[0] for row in result.fetchall()]
            
            if tables:
                print(f"   üìã Encontradas {len(tables)} tablas para eliminar")
                
                # Eliminar cada tabla
                for table in tables:
                    try:
                        conn.execute(text(f"DROP TABLE IF EXISTS `{table}`"))
                        print(f"   ‚úÖ Eliminada: {table}")
                    except Exception as e:
                        print(f"   ‚ùå Error con {table}: {e}")
                
                # Verificar que no queden tablas
                result = conn.execute(text("SHOW TABLES"))
                remaining = [row[0] for row in result.fetchall()]
                
                if remaining:
                    print(f"   ‚ö†Ô∏è  A√∫n quedan tablas: {remaining}")
                else:
                    print("   üéâ Todas las tablas eliminadas exitosamente")
            else:
                print("   ‚ÑπÔ∏è  No hay tablas para eliminar")
            
            # Rehabilitar foreign key checks
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
            conn.commit()
            
        except Exception as e:
            print(f"‚ùå Error en force_drop_all_tables: {e}")
            return False
    
    return True

def reset_database():
    """Resetea completamente la base de datos"""
    print("ÔøΩÔ∏è  Iniciando reset de la base de datos...")
    
    engine = create_engine(settings.sync_dsn, echo=False)
    
    # Verificar conexi√≥n
    try:
        with engine.connect() as conn:
            print("‚úÖ Conexi√≥n a la base de datos establecida")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # Intentar eliminaci√≥n est√°ndar primero
    print("üóëÔ∏è  Intentando eliminaci√≥n est√°ndar...")
    
    # Import all models to register them with Base.metadata
    from src.entities import (
        plato, vino, categoria_plato, categoria_vino,
        alergeno, bodega, denominacion_origen, enologo, uva, user
    )
    # Also import the mixins to ensure they're loaded
    from src.entities import mixins
    
    with engine.connect() as conn:
        try:
            # Deshabilitar foreign key checks
            print("ÔøΩ Deshabilitando foreign key checks...")
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
            
            # Usar metadata para eliminar tablas en orden correcto
            Base.metadata.drop_all(bind=engine)
            print("‚úÖ Eliminaci√≥n por metadata exitosa")
            
            # Rehabilitar foreign key checks
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
            conn.commit()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Eliminaci√≥n est√°ndar fall√≥: {e}")
            print("üî® Intentando eliminaci√≥n forzada...")
            
            # Si falla, usar eliminaci√≥n forzada
            if not force_drop_all_tables():
                print("‚ùå No se pudieron eliminar las tablas")
                return False
    
    # Crear todas las tablas nuevamente
    print("üèóÔ∏è  Creando tablas...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tablas creadas exitosamente")
    except Exception as e:
        print(f"‚ùå Error creando tablas: {e}")
        return False
    
    # Cargar datos por defecto
    print("üì¶ Cargando datos por defecto...")
    try:
        _load_default_data()
        print("‚úÖ Datos por defecto cargados")
    except Exception as e:
        print(f"‚ùå Error cargando datos por defecto: {e}")
        return False
    
    # Crear usuario administrador
    print("üë§ Creando usuario administrador...")
    try:
        auth_service = AuthService()
        admin_user = auth_service.create_user(
            username="admin",
            password="admin123",
            role="admin"
        )
        print(f"‚úÖ Usuario administrador creado: {admin_user.username}")
    except Exception as e:
        print(f"‚ùå Error creando usuario administrador: {e}")
        return False
    
    print("üéâ ¬°Reset de base de datos completado exitosamente!")
    return True
        
        # 4. Cargar datos por defecto
        print("üå± Cargando datos por defecto...")
        _load_default_data()
        print("‚úÖ Datos por defecto cargados")
        
        print("\nüéâ ¬°Base de datos reseteada exitosamente!")
        print("\nüìã Resumen de datos cargados:")
        print("   ‚Ä¢ 10 categor√≠as de platos")
        print("   ‚Ä¢ 15 al√©rgenos (legislaci√≥n espa√±ola + sin al√©rgenos)")
        print("   ‚Ä¢ 11 categor√≠as de vinos")
        print("   ‚Ä¢ 6 denominaciones de origen b√°sicas")
        print("   ‚Ä¢ 11 tipos de uva comunes")
        print("\nüîç Caracter√≠sticas de auditor√≠a:")
        print("   ‚Ä¢ created_at: Fecha/hora de creaci√≥n autom√°tica")
        print("   ‚Ä¢ updated_at: Fecha/hora de modificaci√≥n autom√°tica")
        print("   ‚Ä¢ is_active: Control de estado (default: True)")
        print("   ‚Ä¢ deleted_at: Eliminaci√≥n l√≥gica (soft delete)")
        print("\nüë§ Usuario administrador:")
        print("   ‚Ä¢ Username: admin")
        print("   ‚Ä¢ Password: admin123")
        print("   ‚Ä¢ Email: admin@restaurant.com")
        
    except Exception as e:
        print(f"‚ùå Error durante el reset: {e}")
        return False
    
    return True

def verify_reset():
    """Verifica que el reset se haya completado correctamente"""
    print("\nüîç Verificando reset...")
    
    engine = create_engine(settings.sync_dsn, echo=False)
    inspector = inspect(engine)
    
    try:
        with engine.connect() as conn:
            # Verificar datos b√°sicos
            data_checks = [
                ("categoria_platos", "SELECT COUNT(*) FROM categoria_platos"),
                ("alergenos", "SELECT COUNT(*) FROM alergenos"),
                ("categoria_vinos", "SELECT COUNT(*) FROM categoria_vinos"),
                ("denominaciones_origen", "SELECT COUNT(*) FROM denominaciones_origen"),
                ("uvas", "SELECT COUNT(*) FROM uvas"),
                ("users", "SELECT COUNT(*) FROM users"),
            ]
            
            print("üìä Verificaci√≥n de datos:")
            all_data_ok = True
            for table_name, query in data_checks:
                result = conn.execute(text(query))
                count = result.scalar()
                status = "‚úÖ" if count > 0 else "‚ùå"
                print(f"   {status} {table_name}: {count} registros")
                if count == 0:
                    all_data_ok = False
            
            # Verificar campos de auditor√≠a
            print("\nüîç Verificaci√≥n de campos de auditor√≠a:")
            tables_to_check = [
                "platos", "vinos", "categoria_platos", "categoria_vinos", 
                "alergenos", "bodegas", "denominaciones_origen", "enologos", "uvas", "users"
            ]
            
            audit_fields = ['created_at', 'updated_at', 'is_active', 'deleted_at']
            all_audit_ok = True
            
            for table_name in tables_to_check:
                if inspector.has_table(table_name):
                    existing_columns = {col['name'] for col in inspector.get_columns(table_name)}
                    
                    missing_fields = []
                    for field in audit_fields:
                        if field not in existing_columns:
                            missing_fields.append(field)
                    
                    if missing_fields:
                        print(f"   ‚ùå {table_name}: faltan campos {missing_fields}")
                        all_audit_ok = False
                    else:
                        print(f"   ‚úÖ {table_name}: campos de auditor√≠a completos")
                else:
                    print(f"   ‚ö†Ô∏è  {table_name}: tabla no existe")
                    all_audit_ok = False
            
            if all_data_ok and all_audit_ok:
                print("\n‚úÖ Verificaci√≥n completada exitosamente")
                print("üéØ Base de datos lista con campos de auditor√≠a")
            else:
                if not all_data_ok:
                    print("\n‚ùå Algunos datos no se cargaron correctamente")
                if not all_audit_ok:
                    print("‚ùå Algunos campos de auditor√≠a faltan")
                
    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {e}")

if __name__ == "__main__":
    print("=" * 70)
    print("üîÑ SCRIPT DE RESET DE BASE DE DATOS CON CAMPOS DE AUDITOR√çA")
    print("=" * 70)
    print()
    print("Este script crear√° una base de datos completamente nueva con:")
    print("  üóÇÔ∏è  Estructura de tablas actualizada")
    print("  üìÖ Campos de auditor√≠a (created_at, updated_at, is_active, deleted_at)")
    print("  üå± Datos por defecto (categor√≠as, al√©rgenos, etc.)")
    print("  üë§ Usuario administrador (admin/admin123)")
    print()
    
    # Confirmar acci√≥n
    response = input("‚ö†Ô∏è  ¬øEst√°s seguro de que quieres ELIMINAR todos los datos? (y/N): ")
    
    if response.lower() != 'y':
        print("‚ùå Operaci√≥n cancelada por el usuario")
        sys.exit(0)
    
    # Ejecutar reset
    success = reset_database()
    
    if success:
        # Verificar resultado
        verify_reset()
        print("\nüöÄ La base de datos est√° lista para usar con campos de auditor√≠a")
        print("üí° Puedes ejecutar 'python scripts-examples/load_sample_data.py' para cargar datos de ejemplo")
        print("üîç Todos los registros tendr√°n campos de auditor√≠a autom√°ticos")
    else:
        print("\nüí• El reset fall√≥. Revisa los errores anteriores.")
        sys.exit(1)
